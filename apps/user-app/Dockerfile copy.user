FROM node:18-alpine AS base

FROM base AS builder
RUN apk update
RUN apk add --no-cache libc6-compat
# Set working directory
WORKDIR /app
# Replace <your-major-version> with the major version installed in your repository. For example:
# RUN yarn global add turbo@^2

RUN npm install -g turbo
COPY . .

# Generate a partial monorepo with a pruned lockfile for a target workspace.
# Assuming "web" is the name entered in the project's package.json: { name: "web" }
RUN turbo prune user-app --docker
# Add lockfile and package.json's of isolated subworkspace
FROM base AS installer
RUN apk update
RUN apk add --no-cache libc6-compat
WORKDIR /app

# First install the dependencies (as they change less often)
COPY .gitignore .gitignore
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/package-lock.json ./package-lock.json

RUN npm install
# Build the project
# Build the project
COPY --from=builder /app/out/full/ .
COPY turbo.json turbo.json
RUN cd packages/db && npx prisma generate   

RUN npm run build --filter=user-app...

FROM base AS runner
WORKDIR /app

# Don't run production as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
USER nextjs

COPY --from=installer /app/apps/user-app/next.config.js .
COPY --from=installer /app/apps/user-app/package.json .

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=installer --chown=nextjs:nodejs /app/apps/user-app/.next/standalone ./
COPY --from=installer --chown=nextjs:nodejs /app/apps/user-app/.next/static ./apps/user-app/.next/static
COPY --from=installer --chown=nextjs:nodejs /app/apps/user-app/public ./apps/user-app/public


EXPOSE 3000

CMD node apps/user-app/server.js
